{"results": [{"node": {"name": "base_spotify_in_url", "root_path": "/Users/vannatrieu/Documents/git_repos/gdelt", "resource_type": "model", "path": "base/base_spotify_in_url.sql", "original_file_path": "models/base/base_spotify_in_url.sql", "package_name": "gdelt", "raw_sql": "--Spotify directly referenced in Source URLs; base model\r\n--adding comments to test git integration\r\n\r\n{{ config(materialized='view') }}\r\n\r\nselect * \r\nfrom GLOBAL_EVENT_V2\r\nwhere lower(SOURCEURL) like '%spotify%'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.gdelt.base_spotify_in_url", "empty": false, "fqn": ["gdelt", "base", "base_spotify_in_url"], "tags": [], "config": {"enabled": true, "materialized": "view", "post-hook": [], "pre-hook": [], "tags": [], "quoting": {}, "column_types": {}, "vars": {}}, "schema": "GDELT_RAW", "database": "SB_HACKATHON_DB_TEAM1", "alias": "base_spotify_in_url", "columns": {}, "description": "", "compiled": true, "compiled_sql": "--Spotify directly referenced in Source URLs; base model\n--adding comments to test git integration\n\n\n\nselect * \nfrom GLOBAL_EVENT_V2\nwhere lower(SOURCEURL) like '%spotify%'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Spotify directly referenced in Source URLs; base model\n--adding comments to test git integration\n\n\n\nselect * \nfrom GLOBAL_EVENT_V2\nwhere lower(SOURCEURL) like '%spotify%'", "wrapped_sql": "None", "build_path": "target/compiled/gdelt/base/base_spotify_in_url.sql"}, "error": null, "skip": false, "status": null, "fail": null, "execution_time": 0.004949092864990234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-06-07T18:29:58.996048Z", "completed_at": "2019-06-07T18:29:58.999863Z"}, {"name": "execute", "started_at": "2019-06-07T18:29:59.000008Z", "completed_at": "2019-06-07T18:29:59.000833Z"}]}, {"node": {"name": "base_spotify_stock_data", "root_path": "/Users/vannatrieu/Documents/git_repos/gdelt", "resource_type": "model", "path": "base/base_spotify_stock_data.sql", "original_file_path": "models/base/base_spotify_stock_data.sql", "package_name": "gdelt", "raw_sql": "-- Welcome to your first dbt model!\r\n-- Did you know that you can also configure models directly within\r\n-- the SQL file? This will override configurations stated in dbt_project.yml\r\n\r\n-- Try changing 'view' to 'table', then re-running dbt\r\n{{ config(materialized='view') }}\r\n\r\n\r\nselect * from SPOTIFY_STOCK_DATA", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.gdelt.base_spotify_stock_data", "empty": false, "fqn": ["gdelt", "base", "base_spotify_stock_data"], "tags": [], "config": {"enabled": true, "materialized": "view", "post-hook": [], "pre-hook": [], "tags": [], "quoting": {}, "column_types": {}, "vars": {}}, "schema": "GDELT_RAW", "database": "SB_HACKATHON_DB_TEAM1", "alias": "base_spotify_stock_data", "columns": {}, "description": "", "compiled": true, "compiled_sql": "-- Welcome to your first dbt model!\n-- Did you know that you can also configure models directly within\n-- the SQL file? This will override configurations stated in dbt_project.yml\n\n-- Try changing 'view' to 'table', then re-running dbt\n\n\n\nselect * from SPOTIFY_STOCK_DATA", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Welcome to your first dbt model!\n-- Did you know that you can also configure models directly within\n-- the SQL file? This will override configurations stated in dbt_project.yml\n\n-- Try changing 'view' to 'table', then re-running dbt\n\n\n\nselect * from SPOTIFY_STOCK_DATA", "wrapped_sql": "None", "build_path": "target/compiled/gdelt/base/base_spotify_stock_data.sql"}, "error": null, "skip": false, "status": null, "fail": null, "execution_time": 0.005609035491943359, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-06-07T18:29:59.001837Z", "completed_at": "2019-06-07T18:29:59.006489Z"}, {"name": "execute", "started_at": "2019-06-07T18:29:59.006599Z", "completed_at": "2019-06-07T18:29:59.007338Z"}]}, {"node": {"name": "xf_spotify_aggregated", "root_path": "/Users/vannatrieu/Documents/git_repos/gdelt", "resource_type": "model", "path": "xf/xf_spotify_aggregated.sql", "original_file_path": "models/xf/xf_spotify_aggregated.sql", "package_name": "gdelt", "raw_sql": "--aggregating xf_spotify_date\r\n\r\n{{ config(materialized='table') }}\r\n\r\nwith SPOTIFY_STOCK_DATA as \r\n(\r\n    select * from {{ref('base_spotify_stock_data')}}\r\n),\r\n\r\nSPOTIFY_STOCK_DATE as\r\n(\r\n    select * from {{ref('xf_spotify_date')}}\r\n)\r\n\r\nselect \r\n      Date_Added\r\n    , Spotify\r\n    , avg(GoldsteinScale) as Avg_GoldensteinScale\r\n    , avg(NumArticles) as Avg_Articles\r\n    , avg(AvgTone) as Avg_Tone\r\n    , avg(Open) as \"Open\"\r\n    , avg(Close) as \"Close\"\r\nfrom SPOTIFY_STOCK_DATE DT  left join SPOTIFY_STOCK_DATA DTA on DT.Date_Added = DTA.\"Date\"\r\ngroup by Date_Added, Spotify \r\norder by Date_added asc", "refs": [["base_spotify_stock_data"], ["xf_spotify_date"]], "sources": [], "depends_on": {"nodes": ["model.gdelt.base_spotify_stock_data", "model.gdelt.xf_spotify_date"], "macros": []}, "unique_id": "model.gdelt.xf_spotify_aggregated", "empty": false, "fqn": ["gdelt", "xf", "xf_spotify_aggregated"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [], "pre-hook": [], "tags": [], "quoting": {}, "column_types": {}, "vars": {}}, "schema": "GDELT_RAW", "database": "SB_HACKATHON_DB_TEAM1", "alias": "xf_spotify_aggregated", "columns": {"AVG_TONE": {"name": "AVG_TONE", "description": "This is the average of the average tone. lulz"}}, "description": "This view is the final output model for Spotify data.", "patch_path": "models/xf/schema.yml", "docrefs": [], "compiled": true, "compiled_sql": "--aggregating xf_spotify_date\n\n\n\nwith SPOTIFY_STOCK_DATA as \n(\n    select * from SB_HACKATHON_DB_TEAM1.GDELT_RAW.base_spotify_stock_data\n),\n\nSPOTIFY_STOCK_DATE as\n(\n    select * from __dbt__CTE__xf_spotify_date\n)\n\nselect \n      Date_Added\n    , Spotify\n    , avg(GoldsteinScale) as Avg_GoldensteinScale\n    , avg(NumArticles) as Avg_Articles\n    , avg(AvgTone) as Avg_Tone\n    , avg(Open) as \"Open\"\n    , avg(Close) as \"Close\"\nfrom SPOTIFY_STOCK_DATE DT  left join SPOTIFY_STOCK_DATA DTA on DT.Date_Added = DTA.\"Date\"\ngroup by Date_Added, Spotify \norder by Date_added asc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.gdelt.xf_spotify_date", "sql": " __dbt__CTE__xf_spotify_date as (\n--Reformatting dates; xf\n\n-- configuring this model as ephemeral so that it doesn't get materialized in the db\n\n\n\nselect \n      to_timestamp_ntz(cast(DATEADDED as string), 'YYYYMMDD HH24MISS') as Date_Added\n    , GoldsteinScale\n    , NumArticles\n    , AvgTone\n    , 'Spotify Mention' as Spotify\n    , SourceURL\nfrom SB_HACKATHON_DB_TEAM1.GDELT_RAW.base_spotify_in_url --using ref() functions, dbt understands dependencies between models and creates DAGs in  proper order \nwhere NumArticles is not null and NumMentions is not null and AvgTone is not null\norder by dateadded asc\n)"}], "injected_sql": "--aggregating xf_spotify_date\n\n\n\nwith  __dbt__CTE__xf_spotify_date as (\n--Reformatting dates; xf\n\n-- configuring this model as ephemeral so that it doesn't get materialized in the db\n\n\n\nselect \n      to_timestamp_ntz(cast(DATEADDED as string), 'YYYYMMDD HH24MISS') as Date_Added\n    , GoldsteinScale\n    , NumArticles\n    , AvgTone\n    , 'Spotify Mention' as Spotify\n    , SourceURL\nfrom SB_HACKATHON_DB_TEAM1.GDELT_RAW.base_spotify_in_url --using ref() functions, dbt understands dependencies between models and creates DAGs in  proper order \nwhere NumArticles is not null and NumMentions is not null and AvgTone is not null\norder by dateadded asc\n),SPOTIFY_STOCK_DATA as \n(\n    select * from SB_HACKATHON_DB_TEAM1.GDELT_RAW.base_spotify_stock_data\n),\n\nSPOTIFY_STOCK_DATE as\n(\n    select * from __dbt__CTE__xf_spotify_date\n)\n\nselect \n      Date_Added\n    , Spotify\n    , avg(GoldsteinScale) as Avg_GoldensteinScale\n    , avg(NumArticles) as Avg_Articles\n    , avg(AvgTone) as Avg_Tone\n    , avg(Open) as \"Open\"\n    , avg(Close) as \"Close\"\nfrom SPOTIFY_STOCK_DATE DT  left join SPOTIFY_STOCK_DATA DTA on DT.Date_Added = DTA.\"Date\"\ngroup by Date_Added, Spotify \norder by Date_added asc", "wrapped_sql": "None", "build_path": "target/compiled/gdelt/xf/xf_spotify_aggregated.sql"}, "error": null, "skip": false, "status": null, "fail": null, "execution_time": 0.012983083724975586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-06-07T18:29:59.015175Z", "completed_at": "2019-06-07T18:29:59.027027Z"}, {"name": "execute", "started_at": "2019-06-07T18:29:59.027164Z", "completed_at": "2019-06-07T18:29:59.028036Z"}]}], "generated_at": "2019-06-07T18:29:59.101794Z", "elapsed_time": 0.1058342456817627}